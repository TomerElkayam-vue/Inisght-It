generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username           String              @unique
  password           String              @db.Text
  firstName          String              @map("first_name")
  lastName           String              @map("last_name")
  createdAt          DateTime            @default(now()) @map("created_at")
  projectPermissions ProjectPermission[]

  @@map("users")
}

model Project {
  id                           String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                         String
  codeRepositoryCredentials    Json?               @map("code_repository_credentials")
  missionManagementCredentials Json?               @map("mission_management_credentials")
  statistics                   Json?
  recommendations              Json?
  createdAt                    DateTime            @default(now())
  projectPermissions           ProjectPermission[]
  employees                    Employee[]
  sprints                      Sprint[]

  @@map("projects")
}

model Role {
  id                 Int                 @id
  name               String              @unique
  createdAt          DateTime            @default(now()) @map("created_at")
  projectPermissions ProjectPermission[]

  @@map("roles")
}

model ProjectPermission {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  projectId String   @db.Uuid
  roleId    Int
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  role    Role    @relation(fields: [roleId], references: [id])

  @@unique([userId, projectId])
  @@map("project_permissions")
}

model Employee {
  id            String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  displayName   String           @map("display_name")
  githubUsername String?         @map("github_username")
  jiraUsername  String?          @map("jira_username")
  projectId   String      @db.Uuid @map("project_id")
  userStats     UserStats[]
  project       Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("employee")
}

model Sprint {
  id          Int         @id
  name        String
  startDate   DateTime    @map("start_date")
  endDate     DateTime    @map("end_date")
  projectId   String      @db.Uuid @map("project_id")
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userStats   UserStats[]

  @@map("sprints")
}

model UserStats {
  id                    String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sprintId             Int            
  employeeId           String        @db.Uuid @map("employee_id")
  totalReviewComments  Int           @map("total_review_comments")
  totalPrTime          BigInt        @map("total_pr_time")
  averageCommentsPerPR Float         @map("average_comments_per_pr")
  averagePrTime        Float         @map("average_pr_time")
  sprint               Sprint        @relation(fields: [sprintId], references: [id], onDelete: Cascade)
  employee             Employee      @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  pullRequests         PullRequest[]

  @@unique([sprintId, employeeId])
  @@map("user_stats")
}

model PullRequest {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  prNumber        Int       @map("pr_number")
  prTitle         String    @map("pr_title")
  reviewComments  Int       @map("review_comments")
  userStatsId     String    @db.Uuid @map("user_stats_id")
  userStats       UserStats @relation(fields: [userStatsId], references: [id], onDelete: Cascade)

  @@unique([prNumber, userStatsId])
  @@map("pull_requests")
}
